# -*- coding: utf-8 -*-
"""defrise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RHVj_9Swbfvp-f_CL_4AcR7znxl6-Itf
"""

import numpy as np
from sklearn import datasets
from sklearn import metrics
import matplotlib.pyplot as plt
import pandas as pd

file_name = '/content/drive/MyDrive/defrise/Catalogue Defrise au 2020-05-28.xlsx' 
catalogue = pd.read_excel(file_name)

#suppression colonne 
catalogue=catalogue.drop(['Unnamed: 7', 'Unnamed: 8','Unnamed: 9','Unnamed: 10'], axis=1)

catalogue.describe()

catalogue.columns.tolist()

recherche_cat=catalogue.loc[catalogue['Code']=='AM107']
recherche_cat.head()

catalogue.groupby('TYPE').sum()

# uniformisation des valeurs de la colonne "Code" pour  tout mettre en lettres capitales ==> Faciliter le future merge avec les lignes de commandes
catalogue['Code'] = catalogue['Code'].str.upper()

# Suppression des espaces avant et après les valeurs, pour supprimer les doublons sur cette colonne (ex CH001)
catalogue['Code'] = catalogue['Code'].str.strip()
catalogue = catalogue.drop_duplicates(subset=['Code'])

file_name = '/content/drive/MyDrive/defrise/Lignes de bon 2004.xls' 
commande_2004 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon 2005.xls' 
commande_2005 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon 2004.xls' 
commande_2004 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon 2006.xls' 
commande_2006 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon 2007.xls' 
commande_2007 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon 2008.xls' 
commande_2008 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon de 2009 part 5.xls' 
commande_2009_part5 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon de 2009 part 4.xls' 
commande_2009_part4 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon de 2009 part 3.xls' 
commande_2009_part3 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon de 2009 part 2.xls' 
commande_2009_part2 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon de 2009 part 2.xls' 
commande_2009_part2 = pd.read_excel(file_name, index_col=0)
file_name = '/content/drive/MyDrive/defrise/Lignes de bon de 2009 part 1.xls' 
commande_2009_part1 = pd.read_excel(file_name, index_col=0)

commande = pd.concat([commande_2004,commande_2005,commande_2006,commande_2007,commande_2008,commande_2009_part1,commande_2009_part2,commande_2009_part3,commande_2009_part4,commande_2009_part5])

commande.head()

#suppression colonne LD_CLE, LD_REMISE,LD_LIGNE
commande=commande.drop(['LD_CLE', 'LD_REMISE','LD_LIGNE'], axis=1)

# suppression des espaces avant et après les valeurs, dans les colonnes 'AR_CODE' et 'LD_BREAK'
commande['AR_CODE']=commande['AR_CODE'].str.strip()
commande['LD_BREAK']=commande['LD_BREAK'].str.strip()

#suppression AR_CODE = * ==> Correspond à des lignes de montant 0
commande_new=commande.loc[commande['AR_CODE'] != '*']

#suppression des lignes où on a AR_CODE = 1 ==> Correspond à des lignes de montant 0
commande_LigneArticle=commande_LigneArticle.loc[commande_LigneArticle['AR_CODE'] != '1']

commande_new2=commande_new.loc[(commande_new['LD_PU'] != 0) & (commande_new['LD_VALEUR'] != 0)]

#suppression des lignes où on a LD_BREAK = D, T, LR ou LS
commande_new2=commande_new2.loc[commande_new2['LD_BREAK'] != 'D'] # les lignes des dates de location
commande_new2=commande_new2.loc[commande_new2['LD_BREAK'] != 'T'] # pour chaque commande, la ligne de total de la commande
commande_new2=commande_new2.loc[commande_new2['LD_BREAK'] != 'LS'] # le montant de la location standard, calculé sur 10% de la valeur des articles
commande_new2=commande_new2.loc[commande_new2['LD_BREAK'] != 'LR'] # le montant LS avec une remise de 30%

commande_new2['ANNEE'] = commande_new2['ED_NUM_BON'].astype(str).str[:4]

commande_new2.describe()

commande_new2.head(10)

commande_new2.loc[commande_new2['AR_CODE']=='APCOF']

# uniformisation des valeurs de la colonne "AR_CODE" pour tout mettre en lettres capitales ==> Faciliter le future merge avec les lignes de catalogue
commande_new2['AR_CODE'] = commande_new2['AR_CODE'].str.upper()

df=commande_new2.merge(catalogue,left_on='AR_CODE', right_on='Code', how='left')

df.describe()

cat=df.loc[df['ED_NUM_BON']=='APCOF']
cat.head()

cat=df.loc[df['Code']=='APCOF']
cat.head()

df.head()

df.groupby('Code').count().sort_values('ED_NUM_BON',ascending=True).head(20)

df=df[~df.LD_LIB_ART.str.contains("Même accessoires", na=False)]

df=df[~df.LD_LIB_ART.str.contains("même accessoires", na=False)]

df=df[~df.LD_LIB_ART.str.contains("CAUTION", na=False)]

df=df[~df.LD_LIB_ART.str.contains("Suivant bons HT", na=False)]

df=df[~df.LD_LIB_ART.str.contains("location d accessoires", na=False)]

df.sort_values('LD_PU',ascending=False).head(20)

df.to_csv('nom-fichier6.csv', encoding="utf-8")

cat=df.loc[df['Code']=='APCOF']
cat.head()

# Use masks to select rows according to a certain condition:
mask = data2['age'] > 30
display(data2.loc[mask,['age','job']])

"""df avec la liste du catalogue, le nombre de bon de commande concerné et la quantité louée ?"""

#compter le nombre de commande sans références
#compter le nombre d'item du catalogue sans commande
#le top des objets loués et par catégories

df.groupby('TYPE')['LD_VALEUR'].mean()*0.1

df.groupby(["TYPE"])["ED_NUM_BON"].nlargest(3)

df.groupby(["name"])["count_1"].nlargest(3)
